import numpy as np

import bloch
import visualise
from sequence.object import generate_times
from sequence.rf_pulse import RFPulse

de_graaf_SLR_pulses = {
    'Linear':
        {
            6:
                {
                    'A': [0.16248152, -0.33473283, 0.31861783, -0.15415863, 0.02225950, -0.00511679,
                          0.00156740, -0.00088433, 0.00013945, -0.00008296, 0.00005558, 0.00006721,
                          0.00010308, 0.00012230, 0.00014492, 0.00015219, 0.00016416, 0.00017416,
                          0.00018167, 0.00018828, 0.00019865],
                    'B': [0] * 20
                },
            12: {
                'A': [0.07926787, -0.15568177, 0.15832894, -0.16016458, 0.16450203, -0.16193649,
                      0.08371448, -0.01839556, 0.00737875, -0.00405617, 0.00266805, -0.00158901,
                      0.00105189, -0.00065938, 0.00036897, -0.00026906, 0.00008059, -0.00011846,
                      -0.00003266, -0.00008225, -0.00005674],
                'B': [0] * 20
            },
            18: {
                'A': [0.05078526, -0.10383633, 0.10238266, -0.10380703, 0.10432680, -0.10506775,
                      0.10762871, -0.11074206, 0.11078835, -0.06001204, 0.01607527, -0.00774033,
                      0.00487509, -0.00348665, 0.00243179, -0.00180295, 0.00133012, -0.00097056,
                      0.00075516, -0.00050716, 0.00042757],
                'B': [0] * 20
            }
        },
    'Refocused':
        {
            6: {
                'A': [0.150616398, 0.19305354, -0.11611928, -0.20334391, 0.01999193, 0.00407566,
                      -0.00008750, -0.00084618, -0.00056449, 0.00022508, 0.00048078, 0.00056717,
                      0.00061858, 0.00065605, 0.00066749, 0.00067343, 0.00067005, 0.00065389,
                      0.00064013, 0.00062404, 0.00060931],
                'B': [0.00000000, -0.23411937, -0.29165608, 0.11054030, 0.02688607, 0.00352382,
                      -0.00249492, -0.00367055, -0.00233207, -0.00187182, -0.00175806, -0.00156218,
                      -0.00136616, -0.00119940, -0.00105887, -0.00093827, -0.00083584, -0.00074915,
                      -0.00067090, -0.00060449, -0.00054598]
            },
            12: {
                'A': [0.08315260, 0.14400077, 0.07895585, -0.02087969, -0.13129505, -0.17436244,
                      0.03958135, 0.00929225, 0.00437258, 0.00231749, 0.00020077, -0.00100345,
                      -0.00115877, -0.00117903, -0.00083545, -0.00044511, -0.00026498, -0.00026771,
                      -0.00025640, -0.00021260, -0.00018750],
                'B': [0.00000000, -0.08421706, -0.14875552, -0.16994331, -0.11648103, 0.04634288,
                      0.11688192, -0.00315922, 0.00233186, 0.00032413, -0.00127448, -0.00162391,
                      -0.00161452, -0.00104817, -0.00068895, -0.00065681, -0.00080349, -0.00087878,
                      -0.00084376, -0.00082904, -0.00081233]
            },
            18: {
                'A': [0.05736874, 0.10733739, 0.08541360, 0.04994930, 0.00316519, -0.05017866,
                      -0.09994613, -0.12402131, -0.07054397, 0.06727440, 0.00210771, 0.00331610,
                      0.00246314, 0.00131397, 0.00053659, -0.00002341, -0.00058156, -0.00089172,
                      -0.00099439, -0.00092942, -0.00075986],
                'B': [0.000000000, -0.04101031, -0.07763002, -0.10503248, -0.11754264, -0.10825003,
                      -0.06913492, 0.00610658, 0.10404452, 0.04444313, -0.00176137, 0.00242586,
                      0.00133322, 0.00025175, -0.00044629, -0.00136098, -0.00134637, -0.00114407,
                      -0.00086665, -0.00061096, -0.00044101]
            }
        },
    'Inversion': {
        6: {
            'A': [0.06635181, -0.13458090, 0.15170590, -0.19982295, 0.17146113, -0.09676891, 0.05893062,
                  -0.03770459, 0.02576376, -0.01748007, 0.01243958, -0.00844882, 0.00602830, -0.00396913,
                  0.00289058, -0.00181555, 0.00141186, -0.00079600, 0.00073058, -0.00030914, 0.00040858],
            'B': [0] * 21
        },
        12: {
            'A': [0.02702691, -0.05390668, 0.05438521, -0.05456922, 0.05492238, -0.05326782, 0.07345793,
                  -0.10515570, 0.09576095, -0.07541780, 0.05969441, -0.04802775, 0.03864893, -0.03195968,
                  0.02610504, -0.02211101, 0.01823381, -0.01576166, 0.01304992, -0.01149885, 0.00950882,
                  -0.00855701, 0.00703153, -0.00643979, 0.00518968, -0.00483605, 0.00379127, -0.00362445,
                  0.00274458, -0.00271675, 0.00195887, -0.00204281, 0.00138194, -0.00155051, 0.00096498,
                  -0.00119024, 0.00065040, -0.00092624, 0.00042258, -0.00072962, 0.00025909],
            'B': [0] * 41
        },
        18: {
            'A': [0.01714172, -0.03421674, 0.03435725, -0.03439342, 0.03459552, -0.03472722, 0.03483642,
                  -0.03479243, 0.03112749, -0.03588703, 0.06241820, -0.07145163, 0.06448437, -0.05645268,
                  0.04885679, -0.04219754, 0.03665936, -0.03179856, 0.02789577, -0.02435225, 0.02158768,
                  -0.01895516, 0.01695494, -0.01496220, 0.01349978, -0.01195154, 0.01086741, -0.00964598,
                  0.00882870, -0.00784569, 0.00722680, -0.00643001, 0.00596445, -0.00531325, 0.00495710,
                  -0.00440550, 0.00411548, -0.00364448, 0.00341476, -0.00300713, 0.00282545, -0.00247516,
                  0.00232921, -0.00203528, 0.00191889, -0.00167024, 0.00157515, -0.00136829, 0.00129420,
                  -0.00111994, 0.00105849, -0.00091635, 0.00086838, -0.00075383, 0.00070878, -0.00061974,
                  0.00057952, -0.00050937, 0.00047143, -0.00042235, 0.00038187],
            'B': [0] * 61
        }

    }
}


def generate_de_graaf_pulse(pulse_type: str, r_value: int, duration: float) -> RFPulse:
    if pulse_type not in de_graaf_SLR_pulses:
        raise ValueError(f"Invalid pulse type: {pulse_type}! Please select 'Linear', 'Refocused' or 'Inversion'.")

    if r_value not in [6, 12, 18]:
        raise ValueError(f"Invalid R value: {r_value}! Please select either 6, 12 or 18.")

    coefficient_dict = de_graaf_SLR_pulses[pulse_type][r_value]

    a = coefficient_dict['A']
    b = coefficient_dict['B']

    times = generate_times(1e-6, duration)
    waveform = a[0]

    for index, (a_value, b_value) in enumerate(zip(a[1:], b[1:])):
        waveform += (a_value * np.cos(2 * np.pi * (index + 1) * times / duration) +
                     b_value * np.sin(2 * np.pi * (index + 1) * times / duration))

    rf_object = RFPulse(1e-6, times, waveform,
                        duration=duration)

    return rf_object


test = generate_de_graaf_pulse('Linear', 18, 4e-3)
amplitude = test.get_optimal_amplitude(30e-6, (-500.0, 500.0), np.pi / 2, display=True)
test.set_amplitude(amplitude)

isochromats = np.linspace(-2500, 2500, 500)
magnetisation = bloch.simulate.non_selective_rot3d_matrix(t1=np.inf, t2=np.inf, df=isochromats,
                                                          rf_pulse=test.get_waveform(1e-5), delta_time=1e-5)

animation = visualise.non_selective_animation(test, magnetisation, isochromats, 1e-5, play=True,
                                              phase_mode=0, save_path=None)
